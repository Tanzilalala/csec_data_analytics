from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from drf_spectacular.utils import extend_schema

from csec_data_analytics_app.models import Vulnerability
from csec_data_analytics_app.serializers.serializers import CVEItemSerializer
from csec_data_analytics_app.serializers.serializers_vulnerability import VulnerabilitySerializer


class VulnerabilityList(APIView):

    @extend_schema(
        responses=VulnerabilitySerializer(many=True),
        description="Get vulnerability objects from the database"
    )
    def get(self, request, *args, **kwargs):
        vulnerability_objects = Vulnerability.objects.all()
        vulnerability_serialized = VulnerabilitySerializer(vulnerability_objects, many=True)
        return_data = vulnerability_serialized.data
        return Response(return_data)

    @extend_schema(
        request=VulnerabilitySerializer,
        responses={200: str},
        description="Create a new vulnerability object"
    )
    def post(self, request):
        data = request.data
        vuln_obj = Vulnerability(
            cve_id=data['cve_id'],
            attack_vector_type=data['attack_vector_type']
        )
        vuln_obj.save()
        return Response({"message": "POST request received"}, status=status.HTTP_201_CREATED)


class VulnerabilityDetail(APIView):
    def get(self, request, cve_id):
        vulnerability_object = Vulnerability.objects(cve_id=cve_id).first()
        vulnerability_serialized = VulnerabilitySerializer(vulnerability_object)
        return_data = vulnerability_serialized.data
        return Response(return_data)

    def put(self, request, cve_id):
        data = request.data
        vulnerability_object = Vulnerability.objects(cve_id=cve_id).first()

        if not vulnerability_object:
            return Response({"error": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)

        vulnerability_serialized = CVEItemSerializer(vulnerability_object, data=data)
        if vulnerability_serialized.is_valid():
            vulnerability_serialized.save()
            return Response({"message": "Vulnerability updated successfully"}, status=status.HTTP_200_OK)
        else:
            return Response(vulnerability_serialized.errors, status=status.HTTP_400_BAD_REQUEST)

    @extend_schema(
        responses={200: str},
        description="Delete a vulnerability object by cve_id"
    )
    def delete(self, request, cve_id):
        vulnerability_object = Vulnerability.objects(cve_id=cve_id).first()

        if not vulnerability_object:
            return Response({"error": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)

        vulnerability_object.delete()
        return Response({"message": "Vulnerability deleted successfully"}, status=status.HTTP_200_OK)